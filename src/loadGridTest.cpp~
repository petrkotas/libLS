static char help[] = "main file launching the whole computation - kind of setup script";

#include <petscdmda.h>
#include <petsctime.h>
#include <vector>
#include <iostream>
#include <algorithm>
#include <iterator>
#include <Eigen/Dense>


#include "Geometry.hpp"
#include "Grid.hpp"
#include "Initializer.hpp"
#include "SphereProvider.hpp"
#include "Interface.hpp"
#include "FmmWrapper.hpp"





#undef __FUNCT__
#define __FUNCT__ "main"
int main(int argc,char **argv) {

	PetscErrorCode ierr;

	bool write_out = true;

	Eigen::Array3i M;            // number of nodes in each dimension
	PetscInt       NP[3];        // number of processors in each direction


	char           fname[120];
	char           oname[120];
	PetscBool      flg;
    PetscLogDouble t0, t1, t2, t3, t4, t5, fmm_time, init_time, load_time;


	ierr = PetscInitialize(&argc, &argv, (char*)0, help); CHKERRQ(ierr);

	PetscOptionsGetString(PETSC_NULL, "-f", fname, 120, &flg);
	if (!flg) {
		// no input filename
		ierr = PetscFinalize();
		return 1;
	}

	PetscOptionsGetString(PETSC_NULL, "-o", oname, 120, &flg);
	if (!flg) {
		// no output filename default will be used
		write_out = false;
	}

	int tmpM, tmpN, tmpP;

	PetscOptionsGetInt(PETSC_NULL,"-m", &tmpM, &flg);
	if (!flg) {
		// no input size
		ierr = PetscFinalize();
		return 1;
	}

	PetscOptionsGetInt(PETSC_NULL,"-n", &tmpN, &flg);
	if (!flg) {
		// no input size
		ierr = PetscFinalize();
		return 1;
	}

	PetscOptionsGetInt(PETSC_NULL,"-p", &tmpP, &flg);
	if (!flg) {
		// no input size
		ierr = PetscFinalize();
		return 1;
	}

	M << tmpM, tmpN, tmpP;

	int rank;
	MPI_Comm_rank(PETSC_COMM_WORLD, &rank);

	ierr = PetscGetTime(&t0);



	Eigen::Array3d minx, maxx;

	minx << -1,-1,-1;
	maxx << 1,1,1;

//	for (int i = 0; i < 3; ++i) {
//		minx[i] = geom.aabb.minX(i);
//		maxx[i] = geom.aabb.maxX(i);
//	}

	ierr = PetscGetTime(&t0);	

	Grid<double, 3>*      gr        = new Grid<double, 3>(minx, maxx, M);
	ierr = PetscGetTime(&t1);
	
	Interface<double, 3>* interface = new Interface<double, 3>(gr);
	
	std::vector<double> center = {0,0,0};
	SphereProvider* provider   = new SphereProvider(center, 0.3, (2 * M[0]));
	

	Initializer<SphereProvider, 3>* init = new Initializer<SphereProvider, 3>(provider);
	interface->initialize(init);
	
	ierr = PetscGetTime(&t2);	

	double shift = gr->getMaxDist();

	FmmWrapper::solveEikonalEquation<3>(interface, shift);

	ierr = PetscGetTime(&t3);

	if (write_out) {
		interface->writeData(oname);
	}

	ierr = PetscGetTime(&t4);


	init_time = t2 - t0;
	fmm_time  = t3 - t2;


	PetscSynchronizedPrintf(PETSC_COMM_WORLD, "Rank, FMM time, Init time, Cells Initialized, Cells total: %5d, %f, %f, %ld, %ld\n",
			rank, fmm_time, init_time, init->cellCounter, gr->getNumberOfLocalCells());
	PetscSynchronizedFlush(PETSC_COMM_WORLD);



	delete provider;
	delete interface;
	delete gr;


	ierr = PetscFinalize();


	return 0;


}
