static char help[] = "main file launching the whole computation - kind of setup script";

#include <petscdmda.h>
#include <petsctime.h>
#include <vector>
#include <iostream>
#include <algorithm>
#include <iterator>
#include <Eigen/Dense>

// includes from LS library
#include "Grid.hpp"
#include "Interface.hpp"
//#include "SphereProvider.hpp"
//#include "Initializer.hpp" // initializer for the sphere


#include "StlFileProvider.hpp"
#include "Initializer_new.hpp"
//#include "Initializer_bruteforce.hpp"


#include "FmmWrapper.hpp"
#include "BoundingBox.hpp"




#undef __FUNCT__
#define __FUNCT__ "main"
int main(int argc,char **argv) {

	PetscErrorCode ierr;


	PetscInt       M[3];         // number of nodes in each dimension
	PetscInt       NP[3];        // number of processors in each direction


	char           fname[120];
	char           oname[120];
	PetscBool      flg;
    PetscLogDouble t0, t1, t2, t3, t4, t5, fmm_time, init_time, load_time;


	ierr = PetscInitialize(&argc, &argv, (char*)0, help); CHKERRQ(ierr);

	PetscOptionsGetString(PETSC_NULL, "-f", fname, 120, &flg);
	if (!flg) {
		// no input filename
		ierr = PetscFinalize();
		return 1;
	}

	PetscOptionsGetString(PETSC_NULL, "-o", oname, 120, &flg);
	if (!flg) {
		// no output filename default will be used
		strcpy(oname, "out_default.dat");
	}

	int rank;
	MPI_Comm_rank(PETSC_COMM_WORLD, &rank);

	ierr = PetscGetTime(&t0);

	// stuff used for loading and processing STL files
	StlFileProvider* provider             = new StlFileProvider(fname);

	std::cout << *provider;

	BoundingBox<double, 3> bb             = provider->getGridSize(1.3); // blow a grid a bit
//	BoundingBox<double, 3> bb;
//	bb.minX << -180, -190, -170;
//	bb.maxX <<  115, -39,   380;


	PetscOptionsGetInt(PETSC_NULL,"-m", &M[0], &flg);
	if (!flg) {
		// no input size
		ierr = PetscFinalize();
		return 1;
	}


	ierr = PetscGetTime(&t1);

	Eigen::Array<int, 3, 1> MM;
	MM << M[0], M[1], M[2];

	Grid<double, 3>*       gr                    = new Grid<double, 3>(bb.minX, bb.maxX, M[0]);
	Interface<double, 3>*  interface             = new Interface<double, 3>(gr);



	Initializer<StlFileProvider, 3>* init  = new Initializer<StlFileProvider, 3>(provider);


	interface->initialize(init);

	ierr = PetscGetTime(&t2);

//	interface->writeData("init.txt");

	double shift = gr->getMaxDist();

	PetscSynchronizedPrintf(PETSC_COMM_WORLD, "Shift :  %f\n", shift);

	FmmWrapper::solveEikonalEquation<3>(interface, shift);

	ierr = PetscGetTime(&t3);

	fmm_time     = t3 - t2;
	init_time    = t2 - t1;
	load_time    = t1 - t0;

	PetscSynchronizedPrintf(PETSC_COMM_WORLD, "Rank, FMM time, Init time, Load time : %5d, %f, %f %f\n", rank, fmm_time, init_time, load_time);
	PetscSynchronizedFlush(PETSC_COMM_WORLD);


//	interface->saveForMatlab(oname);
//	interface->saveForParaView(oname);
	interface->writeData(oname);
//	interface->saveToHDF5(oname);


	delete init;
	delete provider;
	delete interface;
	delete gr;

	ierr = PetscFinalize();
	return 0;
}
