/*
 * Initializer.hpp
 *
 *  Created on: Nov 8, 2012
 *      Author: petr
 */

#ifndef INITIALIZER_HPP_
#define INITIALIZER_HPP_

#include <vector>
#include <limits>
#include <petscdmadda.h>
#include "BoundingBox.hpp"


template <typename DataProvider, int dim>
class Initializer {

	// Actually all data should come from DataProvider class, even the distance function

	DataProvider* dataProvider;


	// utility function, tranform coordinates to indices
	std::vector<std::vector<PetscInt> >
	locateIndices(const std::vector<std::vector<PetscReal> >& coord, Grid<double, dim>* gr);



	// select which boundaries need to be initialized
	int selectBoundaries(Grid<double, dim>* gr);

	// check if node ows the whole geometry
	bool haveAllGeometry(Grid<double, dim>* gr);

	// check if have some geometry
	bool haveSomeGeometry(Grid<double, dim>* gr);

	// check if coordinate is on this node
	const bool haveCoordinate(const std::vector<double>& coord, Grid<double, dim>* gr) const;


public:
	Initializer();
	Initializer(DataProvider* provider): dataProvider(provider), cellCounter(0) {};
	~Initializer(){};

	// this method will do the magic and initialize the local part of the data accordingly to the
	// defined input stuff
	PetscReal* updateArray(PetscReal* data, Grid<double, dim>* gr);

	// find the coordinate and its index with indices of its neigbours
	BoundingBox<int, dim> locateIndex(const std::vector<PetscReal>& coord, Grid<double, dim>* gr);


	long int cellCounter; // for debug purpose, remove later

};


///================================================
///               Implementation
///================================================


template <typename DataProvider, int dim> PetscReal* Initializer<DataProvider, dim>::updateArray(PetscReal* data, Grid<double, dim>* gr) {

	DMDALocalInfo* info = gr->getLocalInfo();

	int rank;
	MPI_Comm_rank(PETSC_COMM_WORLD, &rank);

	for (long int i = 0; i < gr->getNumberOfLocalCells(); ++i)
		data[i] = std::numeric_limits<double>::max();

	long int maxCels = gr->getNumberOfLocalCells();

	// place starting geometry
	if ( haveSomeGeometry(gr) ) {

		std::vector<std::vector<double> > coords = dataProvider->getCoord();

		for (auto it = coords.begin(); it != coords.end(); ++it) {
			// loop over the coordinated, locate the indices, find neighbours, get distance

			if ( haveCoordinate(*it, gr) ) {

				BoundingBox<int, dim> bb  = locateIndex(*it, gr);

				for (int k = bb.minX(2); k <= bb.maxX(2); ++k) {
					for (int j = bb.minX(1); j <= bb.maxX(1); ++j) {
						for (int i = bb.minX(0); i <= bb.maxX(0); ++i) {
							int inds[3]  = {i,j,k};
							long int linearI  = gr->getLinearIndex(inds);
							double v = dataProvider->computeDistance(gr->getLocalCoord(inds));

							data[linearI] = v;
							cellCounter++;
						}
					}
				}


			}
		}
	}

//	for (long int i = 0; i < gr->getNumberOfLocalCells(); ++i)
//		if (data[i] == std::numeric_limits<double>::max())
//			data[i] = 0;

	// initialize boundaries, or not
	int selectedBoundaries = selectBoundaries(gr);

	if ( selectedBoundaries & 1 ) {
		// initialize left side

		for (int j = 0; j < info->gym; ++j) {
			for (int k = 0; k < info->gzm; ++k) {

				PetscInt inds[dim]           = {0, j, k};
				long int linearInd           = gr->getLinearIndex(inds);
				std::vector<PetscReal> coord = gr->getLocalCoord(inds);
				double dist                  = dataProvider->computeDistance(coord);

				data[linearInd] = dist;

				cellCounter++;

			}
		}

	}

	if ( selectedBoundaries & 2 ) {

		// this means lets initialize right side
		for (int j = 0; j < info->gym; ++j) {
			for (int k = 0; k < info->gzm; ++k) {

				PetscInt inds[dim]           = {(info->gxm - 1), j, k};
				long int linearInd           = gr->getLinearIndex(inds);
				std::vector<PetscReal> coord = gr->getLocalCoord(inds);
				double dist                  = dataProvider->computeDistance(coord);

				data[linearInd] = dist;

				cellCounter++;

			}
		}

	}

	if ( selectedBoundaries & 4 ) {

		// this means initialize the bottom side
		for (int i = 0; i < info->gxm; ++i) {
			for (int k = 0; k < info->gzm; ++k) {

				PetscInt inds[dim]           = {i, 0, k};
				long int linearInd           = gr->getLinearIndex(inds);
				std::vector<PetscReal> coord = gr->getLocalCoord(inds);
				double dist                  = dataProvider->computeDistance(coord);

				data[linearInd] = dist;

				cellCounter++;

			}
		}

	}

	if ( selectedBoundaries & 8 ) {

		// this means initialize the top side
		for (int i = 0; i < info->gxm; ++i) {
			for (int k = 0; k < info->gzm; ++k) {

				PetscInt inds[dim]           = {i, (info->gym-1), k};
				long int linearInd           = gr->getLinearIndex(inds);
				std::vector<PetscReal> coord = gr->getLocalCoord(inds);
				double dist                  = dataProvider->computeDistance(coord);

				data[linearInd] = dist;

				cellCounter++;

			}
		}

	}

	if ( selectedBoundaries & 16 ) {

		// this means initialize the front side
		for (int i = 0; i < info->gxm; ++i) {
			for (int j = 0; j < info->gym; ++j) {

				PetscInt inds[dim]           = {i, j, 0};
				long int linearInd           = gr->getLinearIndex(inds);
				std::vector<PetscReal> coord = gr->getLocalCoord(inds);
				double dist                  = dataProvider->computeDistance(coord);

				data[linearInd] = dist;

				cellCounter++;

			}
		}

	}

	if ( selectedBoundaries & 32 ) {

		// this means initialize the rear side
		for (int i = 0; i < info->gxm; ++i) {
			for (int j = 0; j < info->gym; ++j) {

				PetscInt inds[dim]           = {i, j, (info->gzm - 1)};
				long int linearInd           = gr->getLinearIndex(inds);
				std::vector<PetscReal> coord = gr->getLocalCoord(inds);
				double dist                  = dataProvider->computeDistance(coord);

				data[linearInd] = dist;

				cellCounter++;

			}
		}

	}

	return data;

}

template <typename DataProvider, int dim> std::vector<std::vector<PetscInt> >
     Initializer<DataProvider, dim>::locateIndices(const std::vector<std::vector<PetscReal> >& coord, Grid<double, dim>* gr) {
	// method that transform coordinate values to indices in the grid. Not sure if this is done in PETSc and
	// I have no time to go through the doucmentation.
	// TODO: resolve this in future :)

	std::vector<std::vector<PetscInt> > indices;
	PetscReal                           minX, dx;


	for	(auto it = coord.begin(); it != coord.end(); ++it) {

		auto                  coordRow = *it;
		std::vector<PetscInt> indRow;

		for (PetscInt i = 0; i < coordRow.size(); ++i) {

			minX = gr->getMin(i);
			dx   = gr->getDx(i);

			PetscInt ind = round( (coordRow[i] - minX) / dx );

			indRow.push_back(ind);

		}

		indices.push_back(indRow);

	}

	return indices;

}

template <typename DataProvider, int dim>
	BoundingBox<int, dim> Initializer<DataProvider, dim>::locateIndex(const std::vector<PetscReal>& coord, Grid<double, dim>* gr) {
	// method that transform coordinate values to indices in the grid. Not sure if this is done in PETSc and
	// I have no time to go through the doucmentation.
	// TODO: resolve this in future :)

	PetscReal                           minX, dx;
	int                                 bandSize = 3;
	DMDALocalInfo*                      info = gr->getLocalInfo();

	int                                 indRow[dim];

	for (PetscInt i = 0; i < dim; ++i) {

		minX = gr->getLocalGhostedMin(i);
		dx   = gr->getDx(i);

		PetscInt ind = round( (coord[i] - minX) / dx );

		indRow[i] = ind;

	}

//	PetscSynchronizedPrintf(PETSC_COMM_WORLD, "ind = [%d, %d, %d] \n", indRow[0], indRow[1], indRow[2]);

	if (dim == 1) {
//		for (int i = -bandSize; i <= bandSize; ++i) {
//			std::vector<PetscInt> bandRow;
//
//			bandRow.push_back(indRow[0] + i);
//
//			indices.push_back(bandRow);
//		}
	} if (dim == 2) {
//		for (int j = -bandSize; j <= bandSize; ++j) {
//			std::vector<PetscInt> bandRow;
//			for (int i = -bandSize; i <= bandSize; ++i) {
//
//				bandRow.push_back(indRow[0] + i);
//				bandRow.push_back(indRow[1] + j);
//
//			}
//			indices.push_back(bandRow);
//		}
	} if (dim == 3) {
		int k_low  = (indRow[2] - bandSize) <  0         ? 0               : (indRow[2] - bandSize);
		int k_high = (indRow[2] + bandSize) >= info->gzm ? (info->gzm - 1) : (indRow[2] + bandSize);

		int j_low  = (indRow[1] - bandSize) <  0         ? 0               : (indRow[1] - bandSize);
		int j_high = (indRow[1] + bandSize) >= info->gym ? (info->gym - 1) : (indRow[1] + bandSize);

		int i_low  = (indRow[0] - bandSize) <  0         ? 0               : (indRow[0] - bandSize);
		int i_high = (indRow[0] + bandSize) >= info->gxm ? (info->gxm - 1) : (indRow[0] + bandSize);


		int minx[3] = {i_low, j_low, k_low};
		int maxx[3] = {i_high, j_high, k_high};
		return BoundingBox<int, dim>::fromMinMax(minx, maxx);

	}

	return BoundingBox<int, dim>();

}

template <typename DataProvider, int dim> int Initializer<DataProvider, dim>::selectBoundaries(Grid<double, dim>* gr) {
	// chooses which boundaries of the domain have to be initialized
	// ordering : [left, right, bottom, top, front, back]

	int selectedBoundaries_int = 0;

	for (int i = 0; i < dim; ++i) {
		if ( gr->getLocalGhostedMin(i) >= dataProvider->getMaxX(i) ) {
			selectedBoundaries_int |= ( 1 << (i*2) );
		}
		if ( gr->getLocalGhostedMax(i) <= dataProvider->getMinX(i) ) {
			selectedBoundaries_int |= ( 1 << (i*2 + 1) );
		}
	}

	return selectedBoundaries_int;

}

template <typename DataProvider, int dim>
	bool Initializer<DataProvider, dim>::haveAllGeometry(Grid<double, dim>* gr) {
	// does the node ows the whole geometry
	// basically one needs to loop thourgh all the data and find bounding box and than check if
	// it fits inside the node.
	// for sphere : simple to do

	bool           owns = false;
	DMDALocalInfo* info = gr->getLocalInfo();

	if (dim == 1) {
		if ( gr->getLocalGhostedMin(0) <= dataProvider->getMinX(0) && dataProvider->getMaxX(0) <=  gr->getLocalGhostedMax(0) ) {
			owns = true;
		}
	} else if (dim == 2) {
		if ( gr->getLocalGhostedMin(0) <= dataProvider->getMinX(0) && dataProvider->getMaxX(0) <=  gr->getLocalGhostedMax(0) ) {
			owns = true;
		}
		if ( gr->getLocalGhostedMin(1) <= dataProvider->getMinX(1) && dataProvider->getMaxX(1) <=  gr->getLocalGhostedMax(1) && owns ) {
			owns = true;
		} else {
			owns = false;
		}
	}else if (dim == 3) {
		if ( gr->getLocalGhostedMin(0) <= dataProvider->getMinX(0) && dataProvider->getMaxX(0) <=  gr->getLocalGhostedMax(0) ) {
			owns = true;
		}
		if ( gr->getLocalGhostedMin(1) <= dataProvider->getMinX(1) && dataProvider->getMaxX(1) <=  gr->getLocalGhostedMax(1) && owns ) {
			owns = true;
		} else {
			owns = false;
		}
		if ( gr->getLocalGhostedMin(2) <= dataProvider->getMinX(2) && dataProvider->getMaxX(2) <=  gr->getLocalGhostedMax(2) && owns ) {
			owns = true;
		} else {
			owns = false;
		}
	}

	return owns;

}

template <typename DataProvider, int dim> bool Initializer<DataProvider, dim>::haveSomeGeometry(Grid<double, dim>* gr) {
	// does the node ows the whole geometry
	// basically one needs to loop thourgh all the data and find bounding box and than check if
	// it fits inside the node.
	// for sphere : simple to do

	if (dim == 1) {

	} else if (dim == 2) {

	}else if (dim == 3) {

		if ( !(gr->getLocalGhostedMin(0) <= dataProvider->getMaxX(0) && dataProvider->getMinX(0) <=  gr->getLocalGhostedMax(0)) ) {
			return false;
		}

		if ( !(gr->getLocalGhostedMin(1) <= dataProvider->getMaxX(1) && dataProvider->getMinX(1) <=  gr->getLocalGhostedMax(1) && owns) ) {
			return false;
		}

		if ( !(gr->getLocalGhostedMin(2) <= dataProvider->getMaxX(2) && dataProvider->getMinX(2) <=  gr->getLocalGhostedMax(2) && owns) ) {
			return false;
		}
	}


	return true;

}

template <typename DataProvider, int dim> inline const bool
 Initializer<DataProvider, dim>::haveCoordinate(const std::vector<double>& coord, Grid<double, dim>* gr) const {

	bool           owns = false;

	if (dim == 1) {
//		if ( gr->getLocalGhostedMin(0) <= coord[0] && coord[0] <=  gr->getLocalGhostedMax(0) ) {
//			owns = true;
//		}
	} else if (dim == 2) {
//		if ( gr->getLocalGhostedMin(0) <= coord[0] && coord[0] <=  gr->getLocalGhostedMax(0) ) {
//			owns = true;
//		}
//		if ( gr->getLocalGhostedMin(1) <= coord[1] && coord[1] <=  gr->getLocalGhostedMax(1) && owns ) {
//			owns = true;
//		} else {
//			owns = false;
//		}
	}else if (dim == 3) {

		owns = false;

		if ( gr->getLocalGhostedMin(0) <= coord[0] && coord[0] <=  gr->getLocalGhostedMax(0) )
			if ( gr->getLocalGhostedMin(1) <= coord[1] && coord[1] <=  gr->getLocalGhostedMax(1) )
				if ( gr->getLocalGhostedMin(2) <= coord[2] && coord[2] <=  gr->getLocalGhostedMax(2) )
					owns = true;

	}

	return owns;

}






























#endif /* INITIALIZER_HPP_ */
