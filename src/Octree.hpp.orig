#ifndef OCTREE_HPP_
#define OCTREE_HPP_

#include <memory>
#include <vector>
#include <list>
#include <iostream>
#include <exception>
#include "BoundingBox.hpp"
#include "TriangleElement.hpp"


/// Stores info about element position in space and node
struct TreeNode {
	/// Id of parallel node
	int nodeID;
	int level;
	
	BoundingBox<double, 3>* nodeSpan;

	/// Stores indices of element possition if vector storage
	std::list<int> elementsInNodeSpan; 
	
	TreeNode* childs[8];
	
	/// Default constructor for empty node;
	TreeNode() {
		nodeID   = -1;
		level    = -1;
		nodeSpan = NULL;
		for (int i = 0; i < 8; ++i)
			childs[i] = NULL;
	}


	/// Recursive constructor used for prealocation of the whole tree
	///
	/// \param center center of the node
	/// \param halfWidth extent of the node
	/// \param level set maximum level of the tree
	TreeNode(double center[3], double halfWidth, int level) {

		nodeSpan    = new BoundingBox<double, 3>(center, halfWidth);
		nodeID      = -1;
		this->level = level;

		if (level > 0 ) {

			double offset[3];
			double step = halfWidth * 0.5;

			for (int i = 0; i < 8; ++i ) {

				offset[0] = (i & 1) ? step : -step;
				offset[1] = (i & 2) ? step : -step;
				offset[2] = (i & 4) ? step : -step;

				try {
					childs[i] = new TreeNode( offset, step, (level - 1) );
				} catch(const std::exception& e) {
					std::cerr << e.what() << std::endl;
				}

			}

		} else {
			for (int i = 0; i < 8; ++i) {
				childs[i] = NULL;
			}
		}

	}

	
	TreeNode(BoundingBox<double, 3>& span, int level) {
	
		nodeSpan    = new BoundingBox<double, 3>(span);
		nodeID      = -1;
		this->level = level;
	
		if (level > 0 ) {

			double offset[3];
			double step = nodeSpan->extent[0] * 0.5; // the extent IS the same in all directions

			for (int i = 0; i < 8; ++i ) {

				offset[0] = (i & 1) ? step : -step;
				offset[1] = (i & 2) ? step : -step;
				offset[2] = (i & 4) ? step : -step;

				try {
					childs[i] = new TreeNode( offset, step, (level - 1) );
				} catch(const std::exception& e) {
					std::cerr << e.what() << std::endl;
				}

			}

		} else {
			for (int i = 0; i < 8; ++i) {
				childs[i] = NULL;
			}
		}

	}

	TreeNode(const TreeNode& node) {

		nodeID   = node.nodeID;
		level    = node.level;
		nodeSpan = new BoundingBox<double, 3>(*node.nodeSpan);

		elementsInNodeSpan = node.elementsInNodeSpan;

		if (level > 0) {
			for (int i = 0; i < 8; ++i) {
				childs[i] = new TreeNode(*node.childs[i]);
			}
		} else {
			for (int i = 0; i < 8; ++i) {
				childs[i] = NULL;
			}
		}
	
	}

	TreeNode operator=(const TreeNode& node) {
		return TreeNode(node);
	}


	~TreeNode() {
		delete nodeSpan;
		if (level > 0) {
			for (int i = 0; i < 8; ++i) {
				delete childs[i];
			}
		}
	}


	void insertElement(const std::shared_ptr<TriangleElement<double>>& element) {

		int index = 0, straddle = 0;
		BoundingBox<double, 3> elBox = element->getBoundingBox();

		for (int i = 0; i < 3; ++i) {
		
			double d = elBox.center[i] - this->nodeSpan->center[i];
			if ( std::abs(d) < ( elBox.extent[i] )  ) {
				straddle = 1;
				break;
			}

			if (d > 0) {
				index |= (1 << i);
			}
		
		}

		if (!straddle && childs[index]) {
			childs[index]->insertElement(element);
		} else {
			elementsInNodeSpan.push_back(element->ID);
		}

	}

	std::list<int> findClosest(Eigen::Vector3d& point) {

		int index = 0;
		std::list<int> closest;

		for (int i = 0; i < 3; ++i) {
		
			double d = point[i] - this->nodeSpan->center[i];

			if (d > 0) {
				index |= (1 << i);
			}
		
 		}

		if (level > 0) {
			closest = childs[index]->findClosest(point);

		} 

		closest.insert(closest.end(), elementsInNodeSpan.begin(), elementsInNodeSpan.end());
	
		return closest;
	}

	

};


// ostream operators used for debug printing

std::ostream& operator<<(std::ostream& os, const TreeNode& node) {
	
	os << "Elements on level (" << node.level << ") : " << node.elementsInNodeSpan.size() << std::endl;

	if (node.level > 0) {
		for (int i = 0; i < 8; ++i)
			os << *node.childs[i];
	}

    return os;
}


#endif // OCTREE_HPP_
